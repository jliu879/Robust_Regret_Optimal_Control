function [FinalInt,BestData] = bisection(fh,InitInt,tol)
% BISECTION Bisection algorithm
%
%  [FinalInt,BestData] = BISECTION(FUN,InitialInt,TOL) performs a
%  bisection starting from the interval [InitialInt(1) InitialInt(2)].
%  TOL = [AbsTol RelTol] gives the absolute relative stopping tolerances.
%
%  The function FUN is evaluate at the midpoint of the interval:
%       MidPoint = sum(InitialInt)/2;
%       [FLAG,DATA] = FUN( MidPoint );
%  where FLAG = true if the result is feasible at the midpoint and false
%  otherwise.  The interval is updated (bisected) based on this result as:
%     [InitialInt(1) MidPoint]   if Flag = true
%     [MidPoint InitialInt(2)]   if Flag = false
%  DATA is any additional data that was generated by the evaluation. The
%  bisection continues until the current interval, Int, satisfies:
%     Int(2)-Int(1) <= AbsTol + RelTol*Int(2)
%  TOL is optional with default values AbsTol=1e-2 and RelTol=1e-3.

% Set default tolerances
narginchk(2,3);
if nargin==2
    tol = [1e-2, 1e-3];   % [AbsTol, RelTol]
end

% Get tolerances and initial bounds
LInt = InitInt(1);
UInt = InitInt(2);
abstol = tol(1);
reltol = tol(2);

% Run bisection
BestData = [];
while (UInt-LInt) > abstol+reltol*UInt
    % Evaluate at midpoint
    MidPoint = (UInt+LInt)/2;
    [flag,data] = fh(MidPoint);
    %[MidPoint flag UInt LInt]  % Uncomment to display bisection results

    % Check result and bisect interval
    if flag
        % Passed
        UInt = MidPoint;
        BestData = data;
    else
        % Failed
        LInt = MidPoint;
    end
end

% Store final interval
FinalInt = [LInt UInt];
